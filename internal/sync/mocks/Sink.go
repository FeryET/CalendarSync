// Code generated by mockery v2.34.1. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/inovex/CalendarSync/internal/models"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Sink is an autogenerated mock type for the Sink type
type Sink struct {
	mock.Mock
}

// CreateEvent provides a mock function with given fields: ctx, e
func (_m *Sink) CreateEvent(ctx context.Context, e models.Event) error {
	ret := _m.Called(ctx, e)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Event) error); ok {
		r0 = rf(ctx, e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteEvent provides a mock function with given fields: ctx, e
func (_m *Sink) DeleteEvent(ctx context.Context, e models.Event) error {
	ret := _m.Called(ctx, e)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Event) error); ok {
		r0 = rf(ctx, e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EventsInTimeframe provides a mock function with given fields: ctx, start, end
func (_m *Sink) EventsInTimeframe(ctx context.Context, start time.Time, end time.Time) ([]models.Event, error) {
	ret := _m.Called(ctx, start, end)

	var r0 []models.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) ([]models.Event, error)); ok {
		return rf(ctx, start, end)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) []models.Event); ok {
		r0 = rf(ctx, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = rf(ctx, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSourceID provides a mock function with given fields:
func (_m *Sink) GetSourceID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *Sink) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// UpdateEvent provides a mock function with given fields: ctx, e
func (_m *Sink) UpdateEvent(ctx context.Context, e models.Event) error {
	ret := _m.Called(ctx, e)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Event) error); ok {
		r0 = rf(ctx, e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSink creates a new instance of Sink. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSink(t interface {
	mock.TestingT
	Cleanup(func())
}) *Sink {
	mock := &Sink{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
